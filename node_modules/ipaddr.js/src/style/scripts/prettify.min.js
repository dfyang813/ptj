	S_reg_check_named_buff_matched(aTHX_ a,b)
#define regcppop(a)		S_regcppop(aTHX_ a)
#define regcppush(a)		S_regcppush(aTHX_ a)
#define reghop3			S_reghop3
#define reghopmaybe3		S_reghopmaybe3
#define reginclass(a,b,c,d,e)	S_reginclass(aTHX_ a,b,c,d,e)
#define regmatch(a,b)		S_regmatch(aTHX_ a,b)
#define regrepeat(a,b,c,d)	S_regrepeat(aTHX_ a,b,c,d)
#define regtry(a,b)		S_regtry(aTHX_ a,b)
#define to_byte_substr(a)	S_to_byte_substr(aTHX_ a)
#define to_utf8_substr(a)	S_to_utf8_substr(aTHX_ a)
#    if defined(XXX_dmq)
#define reghop4			S_reghop4
#    endif
#  endif
#  if defined(PERL_IN_UTF8_C) || defined(PERL_IN_REGCOMP_C) || defined(PERL_IN_REGEXEC_C)
#define _to_fold_latin1(a,b,c,d)	Perl__to_fold_latin1(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_OLD_COPY_ON_WRITE)
#define sv_setsv_cow(a,b)	Perl_sv_setsv_cow(aTHX_ a,b)
#  endif
#endif
#ifdef PERL_CORE
#define allocmy(a,b,c)		Perl_allocmy(aTHX_ a,b,c)
#define amagic_is_enabled(a)	Perl_amagic_is_enabled(aTHX_ a)
#define apply(a,b,c)		Perl_apply(aTHX_ a,b,c)
#define bind_match(a,b,c)	Perl_bind_match(aTHX_ a,b,c)
#define block_end(a,b)		Perl_block_end(aTHX_ a,b)
#define block_start(a)		Perl_block_start(aTHX_ a)
#define boot_core_PerlIO()	Perl_boot_core_PerlIO(aTHX)
#define boot_core_UNIVERSAL()	Perl_boot_core_UNIVERSAL(aTHX)
#define boot_core_mro()		Perl_boot_core_mro(aTHX)
#define cando(a,b,c)		Perl_cando(aTHX_ a,b,c)
#define check_utf8_print(a,b)	Perl_check_utf8_print(aTHX_ a,b)
#define ck_anoncode(a)		Perl_ck_anoncode(aTHX_ a)
#define ck_bitop(a)		Perl_ck_bitop(aTHX_ a)
#define ck_chdir(a)		Perl_ck_chdir(aTHX_ a)
#define ck_cmp(a)		Perl_ck_cmp(aTHX_ a)
#define ck_concat(a)		Perl_ck_concat(aTHX_ a)
#define ck_defined(a)		Perl_ck_defined(aTHX_ a)
#define ck_delete(a)		Perl_ck_delete(aTHX_ a)
#define ck_die(a)		Perl_ck_die(aTHX_ a)
#define ck_each(a)		Perl_ck_each(aTHX_ a)
#define ck_eof(a)		Perl_ck_eof(aTHX_ a)
#define ck_eval(a)		Perl_ck_eval(aTHX_ a)
#define ck_exec(a)		Perl_ck_exec(aTHX_ a)
#define ck_exists(a)		Perl_ck_exists(aTHX_ a)
#define ck_exit(a)		Perl_ck_exit(aTHX_ a)
#define ck_ftst(a)		Perl_ck_ftst(aTHX_ a)
#define ck_fun(a)		Perl_ck_fun(aTHX_ a)
#define ck_glob(a)		Perl_ck_glob(aTHX_ a)
#define ck_grep(a)		Perl_ck_grep(aTHX_ a)
#define ck_index(a)		Perl_ck_index(aTHX_ a)
#define ck_join(a)		Perl_ck_join(aTHX_ a)
#define ck_length(a)		Perl_ck_length(aTHX_ a)
#define ck_lfun(a)		Perl_ck_lfun(aTHX_ a)
#define ck_listiob(a)		Perl_ck_listiob(aTHX_ a)
#define ck_match(a)		Perl_ck_match(aTHX_ a)
#define ck_method(a)		Perl_ck_method(aTHX_ a)
#define ck_null(a)		Perl_ck_null(aTHX_ a)
#define ck_open(a)		Perl_ck_open(aTHX_ a)
#define ck_readline(a)		Perl_ck_readline(aTHX_ a)
#define ck_repeat(a)		Perl_ck_repeat(aTHX_ a)
#define ck_require(a)		Perl_ck_require(aTHX_ a)
#define ck_return(a)		Perl_ck_return(aTHX_ a)
#define ck_rfun(a)		Perl_ck_rfun(aTHX_ a)
#define ck_rvconst(a)		Perl_ck_rvconst(aTHX_ a)
#define ck_sassign(a)		Perl_ck_sassign(aTHX_ a)
#define ck_select(a)		Perl_ck_select(aTHX_ a)
#define ck_shift(a)		Perl_ck_shift(aTHX_ a)
#define ck_smartmatch(a)	Perl_ck_smartmatch(aTHX_ a)
#define ck_sort(a)		Perl_ck_sort(aTHX_ a)
#define ck_spair(a)		Perl_ck_spair(aTHX_ a)
#define ck_split(a)		Perl_ck_split(aTHX_ a)
#define ck_subr(a)		Perl_ck_subr(aTHX_ a)
#define ck_substr(a)		Perl_ck_substr(aTHX_ a)
#define ck_svconst(a)		Perl_ck_svconst(aTHX_ a)
#define ck_tell(a)		Perl_ck_tell(aTHX_ a)
#define ck_trunc(a)		Perl_ck_trunc(aTHX_ a)
#define convert(a,b,c)		Perl_convert(aTHX_ a,b,c)
#define core_prototype(a,b,c,d)	Perl_core_prototype(aTHX_ a,b,c,d)
#define coresub_op(a,b,c)	Perl_coresub_op(aTHX_ a,b,c)
#define create_eval_scope(a)	Perl_create_eval_scope(aTHX_ a)
#define cv_ckproto_len_flags(a,b,c,d,e)	Perl_cv_ckproto_len_flags(aTHX_ a,b,c,d,e)
#define cvgv_set(a,b)		Perl_cvgv_set(aTHX_ a,b)
#define cvstash_set(a,b)	Perl_cvstash_set(aTHX_ a,b)
#define deb_stack_all()		Perl_deb_stack_all(aTHX)
#define delete_eval_scope()	Perl_delete_eval_scope(aTHX)
#define die_unwind(a)		Perl_die_unwind(aTHX_ a)
#define do_aexec5(a,b,c,d,e)	Perl_do_aexec5(aTHX_ a,b,c,d,e)
#define do_dump_pad(a,b,c,d)	Perl_do_dump_pad(aTHX_ a,b,c,d)
#define do_eof(a)		Perl_do_eof(aTHX_ a)
#define do_execfree()		Perl_do_execfree(aTHX)
#define do_ncmp(a,b)		Perl_do_ncmp(aTHX_ a,b)
#define do_print(a,b)		Perl_do_print(aTHX_ a,b)
#define do_readline()		Perl_do_readline(aTHX)
#define do_seek(a,b,c)		Perl_do_seek(aTHX_ a,b,c)
#define do_sysseek(a,b,c)	Perl_do_sysseek(aTHX_ a,b,c)
#define do_tell(a)		Perl_do_tell(aTHX_ a)
#define do_trans(a)		Perl_do_trans(aTHX_ a)
#define do_vecget(a,b,c)	Perl_do_vecget(aTHX_ a,b,c)
#define do_vecset(a)		Perl_do_vecset(aTHX_ a)
#define do_vop(a,b,c,d)		Perl_do_vop(aTHX_ a,b,c,d)
#define dofile(a,b)		Perl_dofile(aTHX_ a,b)
#define dump_all_perl(a)	Perl_dump_all_perl(aTHX_ a)
#define dump_packsubs_perl(a,b)	Perl_dump_packsubs_perl(aTHX_ a,b)
#define dump_sub_perl(a,b)	Perl_dump_sub_perl(aTHX_ a,b)
#define finalize_optree(a)	Perl_finalize_optree(aTHX_ a)
#define find_rundefsv2(a,b)	Perl_find_rundefsv2(aTHX_ a,b)
#define find_script(a,b,c,d)	Perl_find_script(aTHX_ a,b,c,d)
#define free_tied_hv_pool()	Perl_free_tied_hv_pool(aTHX)
#define get_hash_seed()		Perl_get_hash_seed(aTHX)
#define get_no_modify()		Perl_get_no_modify(aTHX)
#define get_opargs()		Perl_get_opargs(aTHX)
#define gv_try_downgrade(a)	Perl_gv_try_downgrade(aTHX_ a)
#define hv_ename_add(a,b,c,d)	Perl_hv_ename_add(aTHX_ a,b,c,d)
#define hv_ename_delete(a,b,c,d)	Perl_hv_ename_delete(aTHX_ a,b,c,d)
#define init_argv_symbols(a,b)	Perl_init_argv_symbols(aTHX_ a,b)
#define init_debugger()		Perl_init_debugger(aTHX)
#define intro_my()		Perl_intro_my(aTHX)
#define invert(a)		Perl_invert(aTHX_ a)
#define io_close(a,b)		Perl_io_close(aTHX_ a,b)
#define jmaybe(a)		Perl_jmaybe(aTHX_ a)
#define keyword(a,b,c)		Perl_keyword(aTHX_ a,b,c)
#define list(a)			Perl_list(aTHX_ a)
#define localize(a,b)		Perl_localize(aTHX_ a,b)
#define magic_clear_all_env(a,b)	Perl_magic_clear_all_env(aTHX_ a,b)
#define magic_clearenv(a,b)	Perl_magic_clearenv(aTHX_ a,b)
#define magic_clearhint(a,b)	Perl_magic_clearhint(aTHX_ a,b)
#define magic_clearhints(a,b)	Perl_magic_clearhints(aTHX_ a,b)
#define magic_clearisa(a,b)	Perl_magic_clearisa(aTHX_ a,b)
#define magic_clearpack(a,b)	Perl_magic_clearpack(aTHX_ a,b)
#define magic_clearsig(a,b)	Perl_magic_clearsig(aTHX_ a,b)
#define magic_existspack(a,b)	Perl_magic_existspack(aTHX_ a,b)
#define magic_freearylen_p(a,b)	Perl_magic_freearylen_p(aTHX_ a,b)
#define magic_freeovrld(a,b)	Perl_magic_freeovrld(aTHX_ a,b)
#define magic_get(a,b)		Perl_magic_get(aTHX_ a,b)
#define magic_getarylen(a,b)	Perl_magic_getarylen(aTHX_ a,b)
#define magic_getdefelem(a,b)	Perl_magic_getdefelem(aTHX_ a,b)
#define magic_getnkeys(a,b)	Perl_magic_getnkeys(aTHX_ a,b)
#define magic_getpack(a,b)	Perl_magic_getpack(aTHX_ a,b)
#define magic_getpos(a,b)	Perl_magic_getpos(aTHX_ a,b)
#define magic_getsig(a,b)	Perl_magic_getsig(aTHX_ a,b)
#define magic_getsubstr(a,b)	Perl_magic_getsubstr(aTHX_ a,b)
#define magic_gettaint(a,b)	Perl_magic_gettaint(aTHX_ a,b)
#define magic_getuvar(a,b)	Perl_magic_getuvar(aTHX_ a,b)
#define magic_getvec(a,b)	Perl_magic_getvec(aTHX_ a,b)
#define magic_killbackrefs(a,b)	Perl_magic_killbackrefs(aTHX_ a,b)
#define magic_len(a,b)		Perl_magic_len(aTHX_ a,b)
#define magic_nextpack(a,b,c)	Perl_magic_nextpack(aTHX_ a,b,c)
#define magic_regdata_cnt(a,b)	Perl_magic_regdata_cnt(aTHX_ a,b)
#define magic_regdatum_get(a,b)	Perl_magic_regdatum_get(aTHX_ a,b)
#define magic_regdatum_set(a,b)	Perl_magic_regdatum_set(aTHX_ a,b)
#define magic_scalarpack(a,b)	Perl_magic_scalarpack(aTHX_ a,b)
#define magic_set(a,b)		Perl_magic_set(aTHX_ a,b)
#define magic_set_all_env(a,b)	Perl_magic_set_all_env(aTHX_ a,b)
#define magic_setamagic(a,b)	Perl_magic_setamagic(aTHX_ a,b)
#define magic_setarylen(a,b)	Perl_magic_setarylen(aTHX_ a,b)
#define magic_setdbline(a,b)	Perl_magic_setdbline(aTHX_ a,b)
#define magic_setdefelem(a,b)	Perl_magic_setdefelem(aTHX_ a,b)
#define magic_setenv(a,b)	Perl_magic_setenv(aTHX_ a,b)
#define magic_sethint(a,b)	Perl_magic_sethint(aTHX_ a,b)
#define magic_setisa(a,b)	Perl_magic_setisa(aTHX_ a,b)
#define magic_setmglob(a,b)	Perl_magic_setmglob(aTHX_ a,b)
#define magic_setnkeys(a,b)	Perl_magic_setnkeys(aTHX_ a,b)
#define magic_setpack(a,b)	Perl_magic_setpack(aTHX_ a,b)
#define magic_setpos(a,b)	Perl_magic_setpos(aTHX_ a,b)
#define magic_setregexp(a,b)	Perl_magic_setregexp(aTHX_ a,b)
#define magic_setsig(a,b)	Perl_magic_setsig(aTHX_ a,b)
#define magic_setsubstr(a,b)	Perl_magic_setsubstr(aTHX_ a,b)
#define magic_settaint(a,b)	Perl_magic_settaint(aTHX_ a,b)
#define magic_setutf8(a,b)	Perl_magic_setutf8(aTHX_ a,b)
#define magic_setuvar(a,b)	Perl_magic_setuvar(aTHX_ a,b)
#define magic_setvec(a,b)	Perl_magic_setvec(aTHX_ a,b)
#define magic_setvstring(a,b)	Perl_magic_setvstring(aTHX_ a,b)
#define magic_sizepack(a,b)	Perl_magic_sizepack(aTHX_ a,b)
#define magic_wipepack(a,b)	Perl_magic_wipepack(aTHX_ a,b)
#define mg_localize(a,b,c)	Perl_mg_localize(aTHX_ a,b,c)
#define mode_from_discipline(a,b)	Perl_mode_from_discipline(aTHX_ a,b)
#define mro_isa_changed_in(a)	Perl_mro_isa_changed_in(aTHX_ a)
#define mro_package_moved(a,b,c,d)	Perl_mro_package_moved(aTHX_ a,b,c,d)
#define munge_qwlist_to_paren_list(a)	Perl_munge_qwlist_to_paren_list(aTHX_ a)
#define my_attrs(a,b)		Perl_my_attrs(aTHX_ a,b)
#define my_clearenv()		Perl_my_clearenv(aTHX)
#define my_lstat_flags(a)	Perl_my_lstat_flags(aTHX_ a)
#define my_stat_flags(a)	Perl_my_stat_flags(aTHX_ a)
#define my_swabn		Perl_my_swabn
#define my_unexec()		Perl_my_unexec(aTHX)
#define newATTRSUB_flags(a,b,c,d,e,f)	Perl_newATTRSUB_flags(aTHX_ a,b,c,d,e,f)
#define newXS_len_flags(a,b,c,d,e,f,g)	Perl_newXS_len_flags(aTHX_ a,b,c,d,e,f,g)
#define nextargv(a)		Perl_nextargv(aTHX_ a)
#define oopsAV(a)		Perl_oopsAV(aTHX_ a)
#define oopsHV(a)		Perl_oopsHV(aTHX_ a)
#define op_const_sv(a,b)	Perl_op_const_sv(aTHX_ a,b)
#define package_version(a)	Perl_package_version(aTHX_ a)
#define pad_block_start(a)	Perl_pad_block_start(aTHX_ a)
#define pad_fixup_inner_anons(a,b,c)	Perl_pad_fixup_inner_anons(aTHX_ a,b,c)
#define pad_free(a)		Perl_pad_free(aTHX_ a)
#define pad_leavemy()		Perl_pad_leavemy(aTHX)
#define pad_push(a,b)		Perl_pad_push(aTHX_ a,b)
#define pad_swipe(a,b)		Perl_pad_swipe(aTHX_ a,b)
#define parse_unicode_opts(a)	Perl_parse_unicode_opts(aTHX_ a)
#define parser_free(a)		Perl_parser_free(aTHX_ a)
#define peep(a)			Perl_peep(aTHX_ a)
#define pmruntime(a,b,c)	Perl_pmruntime(aTHX_ a,b,c)
#define refcounted_he_chain_2hv(a,b)	Perl_refcounted_he_chain_2hv(aTHX_ a,b)
#define refcounted_he_fetch_pv(a,b,c,d)	Perl_refcounted_he_fetch_pv(aTHX_ a,b,c,d)
#define refcounted_he_fetch_pvn(a,b,c,d,e)	Perl_refcounted_he_fetch_pvn(aTHX_ a,b,c,d,e)
#define refcounted_he_fetch_sv(a,b,c,d)	Perl_refcounted_he_fetch_sv(aTHX_ a,b,c,d)
#define refcounted_he_free(a)	Perl_refcounted_he_free(aTHX_ a)
#define refcounted_he_inc(a)	Perl_refcounted_he_inc(aTHX_ a)
#define refcounted_he_new_pv(a,b,c,d,e)	Perl_refcounted_he_new_pv(aTHX_ a,b,c,d,e)
#define refcounted_he_new_pvn(a,b,c,d,e,f)	Perl_refcounted_he_new_pvn(aTHX_ a,b,c,d,e,f)
#define refcounted_he_new_sv(a,b,c,d,e)	Perl_refcounted_he_new_sv(aTHX_ a,b,c,d,e)
#define report_evil_fh(a)	Perl_report_evil_fh(aTHX_ a)
#define report_wrongway_fh(a,b)	Perl_report_wrongway_fh(aTHX_ a,b)
#define rpeep(a)		Perl_rpeep(aTHX_ a)
#define rsignal_restore(a,b)	Perl_rsignal_restore(aTHX_ a,b)
#define rsignal_save(a,b,c)	Perl_rsignal_save(aTHX_ a,b,c)
#define rxres_save(a,b)		Perl_rxres_save(aTHX_ a,b)
#define sawparens(a)		Perl_sawparens(aTHX_ a)
#define scalar(a)		Perl_scalar(aTHX_ a)
#define scalarvoid(a)		Perl_scalarvoid(aTHX_ a)
#define sub_crush_depth(a)	Perl_sub_crush_depth(aTHX_ a)
#define sv_2num(a)		Perl_sv_2num(aTHX_ a)
#define sv_clean_all()		Perl_sv_clean_all(aTHX)
#define sv_clean_objs()		Perl_sv_clean_objs(aTHX)
#define sv_del_backref(a,b)	Perl_sv_del_backref(aTHX_ a,b)
#define sv_free_arenas()	Perl_sv_free_arenas(aTHX)
#define sv_ref(a,b,c)		Perl_sv_ref(aTHX_ a,b,c)
#define sv_sethek(a,b)		Perl_sv_sethek(aTHX_ a,b)
#ifndef PERL_IMPLICIT_CONTEXT
#define tied_method		Perl_tied_method
#endif
#define unshare_hek(a)		Perl_unshare_hek(aTHX_ a)
#define vivify_ref(a,b)		Perl_vivify_ref(aTHX_ a,b)
#define wait4pid(a,b,c)		Perl_wait4pid(aTHX_ a,b,c)
#define watch(a)		Perl_watch(aTHX_ a)
#define write_to_stderr(a)	Perl_write_to_stderr(aTHX_ a)
#define yyerror(a)		Perl_yyerror(aTHX_ a)
#define yyerror_pv(a,b)		Perl_yyerror_pv(aTHX_ a,b)
#define yyerror_pvn(a,b,c)	Perl_yyerror_pvn(aTHX_ a,b,c)
#define yyparse(a)		Perl_yyparse(aTHX_ a)
#define yyunlex()		Perl_yyunlex(aTHX)
#  if !(defined(DEBUGGING))
#    if !defined(NV_PRESERVES_UV)
#      if defined(PERL_IN_SV_C)
#define sv_2iuv_non_preserve(a)	S_sv_2iuv_non_preserve(aTHX_ a)
#      endif
#    endif
#  endif
#  if !(defined(HAS_SIGACTION) && defined(SA_SIGINFO))
#define sighandler		Perl_sighandler
#  endif
#  if !(defined(PERL_DEFAULT_DO_EXEC3_IMPLEMENTATION))
#define do_exec(a)		Perl_do_exec(aTHX_ a)
#  endif
#  if !(defined(PERL_MAD))
#define package(a)		Perl_package(aTHX_ a)
#define utilize(a,b,c,d,e)	Perl_utilize(aTHX_ a,b,c,d,e)
#  endif
#  if !defined(HAS_GETENV_LEN)
#define getenv_len(a,b)		Perl_getenv_len(aTHX_ a,b)
#  endif
#  if !defined(HAS_MKDIR) || !defined(HAS_RMDIR)
#    if defined(PERL_IN_PP_SYS_C)
#define dooneliner(a,b)		S_dooneliner(aTHX_ a,b)
#    endif
#  endif
#  if !defined(HAS_RENAME)
#define same_dirent(a,b)	Perl_same_dirent(aTHX_ a,b)
#  endif
#  if !defined(NV_PRESERVES_UV)
#    if defined(DEBUGGING)
#      if defined(PERL_IN_SV_C)
#define sv_2iuv_non_preserve(a,b)	S_sv_2iuv_non_preserve(aTHX_ a,b)
#      endif
#    endif
#  endif
#  if !defined(PERL_DISABLE_PMC)
#    if defined(PERL_IN_PP_CTL_C)
#define doopen_pm(a)		S_doopen_pm(aTHX_ a)
#    endif
#  endif
#  if !defined(PERL_IS_MINIPERL)
#    if defined(PERL_IN_PERL_C)
#define incpush_if_exists(a,b,c)	S_incpush_if_exists(aTHX_ a,b,c)
#    endif
#  endif
#  if !defined(PERL_NO_UTF16_FILTER)
#    if defined(PERL_IN_TOKE_C)
#define add_utf16_textfilter(a,b)	S_add_utf16_textfilter(aTHX_ a,b)
#define utf16_textfilter(a,b,c)	S_utf16_textfilter(aTHX_ a,b,c)
#    endif
#  endif
#  if !defined(WIN32)
#define do_exec3(a,b,c)		Perl_do_exec3(aTHX_ a,b,c)
#  endif
#  if defined(DEBUGGING)
#define get_debug_opts(a,b)	Perl_get_debug_opts(aTHX_ a,b)
#    if defined(PERL_IN_PAD_C)
#define cv_dump(a,b)		S_cv_dump(aTHX_ a,b)
#    endif
#    if defined(PERL_IN_SV_C)
#define del_sv(a)		S_del_sv(aTHX_ a)
#    endif
#    if defined(PERL_IN_TOKE_C)
#define printbuf(a,b)		S_printbuf(aTHX_ a,b)
#define tokereport(a,b)		S_tokereport(aTHX_ a,b)
#    endif
#  endif
#  if defined(DEBUG_LEAKING_SCALARS_FORK_DUMP)
#define dump_sv_child(a)	Perl_dump_sv_child(aTHX_ a)
#  endif
#  if defined(HAS_MSG) || defined(HAS_SEM) || defined(HAS_SHM)
#define do_ipcctl(a,b,c)	Perl_do_ipcctl(aTHX_ a,b,c)
#define do_ipcget(a,b,c)	Perl_do_ipcget(aTHX_ a,b,c)
#define do_msgrcv(a,b)		Perl_do_msgrcv(aTHX_ a,b)
#define do_msgsnd(a,b)		Perl_do_msgsnd(aTHX_ a,b)
#define do_semop(a,b)		Perl_do_semop(aTHX_ a,b)
#define do_shmio(a,b,c)		Perl_do_shmio(aTHX_ a,b,c)
#  endif
#  if defined(HAS_SIGACTION) && defined(SA_SIGINFO)
#define sighandler		Perl_sighandler
#  endif
#  if defined(MYMALLOC)
#define malloc_good_size	Perl_malloc_good_size
#define malloced_size		Perl_malloced_size
#  endif
#  if defined(PERL_CR_FILTER)
#    if defined(PERL_IN_TOKE_C)
#define cr_textfilter(a,b,c)	S_cr_textfilter(aTHX_ a,b,c)
#define strip_return(a)		S_strip_return(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_DEBUG_READONLY_OPS)
#    if defined(PERL_IN_OP_C)
#      if defined(PL_OP_SLAB_ALLOC)
#define Slab_to_rw(a)		S_Slab_to_rw(aTHX_ a)
#      endif
#    endif
#  endif
#  if defined(PERL_IN_AV_C)
#define get_aux_mg(a)		S_get_aux_mg(aTHX_ a)
#  endif
#  if defined(PERL_IN_DEB_C)
#define deb_stack_n(a,b,c,d,e)	S_deb_stack_n(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_DOIO_C)
#define exec_failed(a,b,c)	S_exec_failed(aTHX_ a,b,c)
#define ingroup(a,b)		S_ingroup(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_DOOP_C)
#define do_trans_complex(a)	S_do_trans_complex(aTHX_ a)
#define do_trans_complex_utf8(a)	S_do_trans_complex_utf8(aTHX_ a)
#define do_trans_count(a)	S_do_trans_count(aTHX_ a)
#define do_trans_count_utf8(a)	S_do_trans_count_utf8(aTHX_ a)
#define do_trans_simple(a)	S_do_trans_simple(aTHX_ a)
#define do_trans_simple_utf8(a)	S_do_trans_simple_utf8(aTHX_ a)
#  endif
#  if defined(PERL_IN_DUMP_C)
#define deb_curcv(a)		S_deb_curcv(aTHX_ a)
#define debprof(a)		S_debprof(aTHX_ a)
#define pm_description(a)	S_pm_description(aTHX_ a)
#define sequence_num(a)		S_sequence_num(aTHX_ a)
#  endif
#  if defined(PERL_IN_GV_C)
#define gv_get_super_pkg(a,b,c)	S_gv_get_super_pkg(aTHX_ a,b,c)
#define gv_init_svtype(a,b)	S_gv_init_svtype(aTHX_ a,b)
#define gv_magicalize_isa(a)	S_gv_magicalize_isa(aTHX_ a)
#define gv_magicalize_overload(a)	S_gv_magicalize_overload(aTHX_ a)
#define require_tie_mod(a,b,c,d,e)	S_require_tie_mod(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_HV_C)
#define clear_placeholders(a,b)	S_clear_placeholders(aTHX_ a,b)
#define hfreeentries(a)		S_hfreeentries(aTHX_ a)
#define hsplit(a)		S_hsplit(aTHX_ a)
#define hv_auxinit		S_hv_auxinit
#define hv_delete_common(a,b,c,d,e,f,g)	S_hv_delete_common(aTHX_ a,b,c,d,e,f,g)
#define hv_free_ent_ret(a,b)	S_hv_free_ent_ret(aTHX_ a,b)
#define hv_magic_check		S_hv_magic_check
#define hv_notallowed(a,b,c,d)	S_hv_notallowed(aTHX_ a,b,c,d)
#define new_he()		S_new_he(aTHX)
#define refcounted_he_value(a)	S_refcounted_he_value(aTHX_ a)
#define save_hek_flags		S_save_hek_flags
#define share_hek_flags(a,b,c,d)	S_share_hek_flags(aTHX_ a,b,c,d)
#define unshare_hek_or_pvn(a,b,c,d)	S_unshare_hek_or_pvn(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_LOCALE_C)
#    if defined(USE_LOCALE_NUMERIC) || defined(USE_LOCALE_COLLATE)
#define stdize_locale(a)	S_stdize_locale(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_IN_MG_C)
#define magic_methcall1(a,b,c,d,e,f)	S_magic_methcall1(aTHX_ a,b,c,d,e,f)
#define magic_methpack(a,b,c)	S_magic_methpack(aTHX_ a,b,c)
#define restore_magic(a)	S_restore_magic(aTHX_ a)
#define save_magic(a,b)		S_save_magic(aTHX_ a,b)
#define unwind_handler_stack(a)	S_unwind_handler_stack(aTHX_ a)
#  endif
#  if defined(PERL_IN_MG_C) || defined(PERL_IN_PP_C)
#define translate_substr_offsets(a,b,c,d,e,f,g)	Perl_translate_substr_offsets(aTHX_ a,b,c,d,e,f,g)
#  endif
#  if defined(PERL_IN_MRO_C)
#define mro_clean_isarev(a,b,c,d,e)	S_mro_clean_isarev(aTHX_ a,b,c,d,e)
#define mro_gather_and_rename(a,b,c,d,e)	S_mro_gather_and_rename(aTHX_ a,b,c,d,e)
#define mro_get_linear_isa_dfs(a,b)	S_mro_get_linear_isa_dfs(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_NUMERIC_C)
#define mulexp10		S_mulexp10
#  endif
#  if defined(PERL_IN_OP_C)
#define aassign_common_vars(a)	S_aassign_common_vars(aTHX_ a)
#define apply_attrs(a,b,c,d)	S_apply_attrs(aTHX_ a,b,c,d)
#define apply_attrs_my(a,b,c,d)	S_apply_attrs_my(aTHX_ a,b,c,d)
#define bad_type_pv(a,b,c,d,e)	S_bad_type_pv(aTHX_ a,b,c,d,e)
#define bad_type_sv(a,b,c,d,e)	S_bad_type_sv(aTHX_ a,b,c,d,e)
#define cop_free(a)		S_cop_free(aTHX_ a)
#define dup_attrlist(a)		S_dup_attrlist(aTHX_ a)
#define finalize_op(a)		S_finalize_op(aTHX_ a)
#define find_and_forget_pmops(a)	S_find_and_forget_pmops(aTHX_ a)
#define fold_constants(a)	S_fold_constants(aTHX_ a)
#define force_list(a)		S_force_list(aTHX_ a)
#define gen_constant_list(a)	S_gen_constant_list(aTHX_ a)
#define gv_ename(a)		S_gv_ename(aTHX_ a)
#define inplace_aassign(a)	S_inplace_aassign(aTHX_ a)
#define is_handle_constructor	S_is_handle_constructor
#define is_list_assignment(a)	S_is_list_assignment(aTHX_ a)
#define listkids(a)		S_listkids(aTHX_ a)
#define looks_like_bool(a)	S_looks_like_bool(aTHX_ a)
#define modkids(a,b)		S_modkids(aTHX_ a,b)
#define my_kid(a,b,c)		S_my_kid(aTHX_ a,b,c)
#define newDEFSVOP()		S_newDEFSVOP(aTHX)
#define newGIVWHENOP(a,b,c,d,e)	S_newGIVWHENOP(aTHX_ a,b,c,d,e)
#define new_logop(a,b,c,d)	S_new_logop(aTHX_ a,b,c,d)
#define no_bareword_allowed(a)	S_no_bareword_allowed(aTHX_ a)
#define no_fh_allowed(a)	S_no_fh_allowed(aTHX_ a)
#define op_integerize(a)	S_op_integerize(aTHX_ a)
#define op_std_init(a)		S_op_std_init(aTHX_ a)
#define opt_scalarhv(a)		S_opt_scalarhv(aTHX_ a)
#define pmtrans(a,b,c)		S_pmtrans(aTHX_ a,b,c)
#define process_special_blocks(a,b,c)	S_process_special_blocks(aTHX_ a,b,c)
#define ref_array_or_hash(a)	S_ref_array_or_hash(aTHX_ a)
#define refkids(a,b)		S_refkids(aTHX_ a,b)
#define scalar_mod_type		S_scalar_mod_type
#define scalarboolean(a)	S_scalarboolean(aTHX_ a)
#define scalarkids(a)		S_scalarkids(aTHX_ a)
#define scalarseq(a)		S_scalarseq(aTHX_ a)
#define search_const(a)		S_search_const(aTHX_ a)
#define simplify_sort(a)	S_simplify_sort(aTHX_ a)
#define too_few_arguments_pv(a,b,c)	S_too_few_arguments_pv(aTHX_ a,b,c)
#define too_few_arguments_sv(a,b,c)	S_too_few_arguments_sv(aTHX_ a,b,c)
#define too_many_arguments_pv(a,b,c)	S_too_many_arguments_pv(aTHX_ a,b,c)
#define too_many_arguments_sv(a,b,c)	S_too_many_arguments_sv(aTHX_ a,b,c)
#  endif
#  if defined(PERL_IN_OP_C) || defined(PERL_IN_SV_C)
#define report_redefined_cv(a,b,c)	Perl_report_redefined_cv(aTHX_ a,b,c)
#  endif
#  if defined(PERL_IN_PAD_C)
#define pad_alloc_name(a,b,c,d)	S_pad_alloc_name(aTHX_ a,b,c,d)
#define pad_check_dup(a,b,c)	S_pad_check_dup(aTHX_ a,b,c)
#define pad_findlex(a,b,c,d,e,f,g,h,i)	S_pad_findlex(aTHX_ a,b,c,d,e,f,g,h,i)
#define pad_reset()		S_pad_reset(aTHX)
#  endif
#  if defined(PERL_IN_PERL_C)
#define find_beginning(a,b)	S_find_beginning(aTHX_ a,b)
#define forbid_setid(a,b)	S_forbid_setid(aTHX_ a,b)
#define incpush(a,b,c)		S_incpush(aTHX_ a,b,c)
#define incpush_use_sep(a,b,c)	S_incpush_use_sep(aTHX_ a,b,c)
#define init_ids()		S_init_ids(aTHX)
#define init_interp()		S_init_interp(aTHX)
#define init_main_stash()	S_init_main_stash(aTHX)
#define init_perllib()		S_init_perllib(aTHX)
#define init_postdump_symbols(a,b,c)	S_init_postdump_symbols(aTHX_ a,b,c)
#define init_predump_symbols()	S_init_predump_symbols(aTHX)
#define mayberelocate(a,b,c)	S_mayberelocate(aTHX_ a,b,c)
#define minus_v()		S_minus_v(aTHX)
#define my_exit_jump()		S_my_exit_jump(aTHX)
#define nuke_stacks()		S_nuke_stacks(aTHX)
#define open_script(a,b,c)	S_open_script(aTHX_ a,b,c)
#define parse_body(a,b)		S_parse_body(aTHX_ a,b)
#define run_body(a)		S_run_body(aTHX_ a)
#define usage()			S_usage(aTHX)
#  endif
#  if defined(PERL_IN_PP_C)
#define do_chomp(a,b,c)		S_do_chomp(aTHX_ a,b,c)
#define do_delete_local()	S_do_delete_local(aTHX)
#define refto(a)		S_refto(aTHX_ a)
#  endif
#  if defined(PERL_IN_PP_CTL_C)
#define adjust_stack_on_leave(a,b,c,d,e)	S_adjust_stack_on_leave(aTHX_ a,b,c,d,e)
#define check_type_and_open(a)	S_check_type_and_open(aTHX_ a)
#define destroy_matcher(a)	S_destroy_matcher(aTHX_ a)
#define do_smartmatch(a,b,c)	S_do_smartmatch(aTHX_ a,b,c)
#define docatch(a)		S_docatch(aTHX_ a)
#define doeval(a,b,c,d,e)	S_doeval(aTHX_ a,b,c,d,e)
#define dofindlabel(a,b,c,d,e,f)	S_dofindlabel(aTHX_ a,b,c,d,e,f)
#define doparseform(a)		S_doparseform(aTHX_ a)
#define dopoptoeval(a)		S_dopoptoeval(aTHX_ a)
#define dopoptogiven(a)		S_dopoptogiven(aTHX_ a)
#define dopoptolabel(a,b,c)	S_dopoptolabel(aTHX_ a,b,c)
#define dopoptoloop(a)		S_dopoptoloop(aTHX_ a)
#define dopoptosub_at(a,b)	S_dopoptosub_at(aTHX_ a,b)
#define dopoptowhen(a)		S_dopoptowhen(aTHX_ a)
#define make_matcher(a)		S_make_matcher(aTHX_ a)
#define matcher_matches_sv(a,b)	S_matcher_matches_sv(aTHX_ a,b)
#define num_overflow		S_num_overflow
#define path_is_absolute	S_path_is_absolute
#define run_user_filter(a,b,c)	S_run_user_filter(aTHX_ a,b,c)
#define rxres_free(a)		S_rxres_free(aTHX_ a)
#define rxres_restore(a,b)	S_rxres_restore(aTHX_ a,b)
#define save_lines(a,b)		S_save_lines(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_PP_HOT_C)
#define do_oddball(a,b,c)	S_do_oddball(aTHX_ a,b,c)
#define method_common(a,b)	S_method_common(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_PP_PACK_C)
#define bytes_to_uni		S_bytes_to_uni
#define div128(a,b)		S_div128(aTHX_ a,b)
#define first_symbol		S_first_symbol
#define get_num(a,b)		S_get_num(aTHX_ a,b)
#define group_end(a,b,c)	S_group_end(aTHX_ a,b,c)
#define is_an_int(a,b)		S_is_an_int(aTHX_ a,b)
#define measure_struct(a)	S_measure_struct(aTHX_ a)
#define mul128(a,b)		S_mul128(aTHX_ a,b)
#define need_utf8		S_need_utf8
#define next_symbol(a)		S_next_symbol(aTHX_ a)
#define pack_rec(a,b,c,d)	S_pack_rec(aTHX_ a,b,c,d)
#define sv_exp_grow(a,b)	S_sv_exp_grow(aTHX_ a,b)
#define unpack_rec(a,b,c,d,e)	S_unpack_rec(aTHX_ a,b,c,d,e)
#  endif
#  if defined(PERL_IN_PP_SORT_C)
#define amagic_cmp(a,b)		S_amagic_cmp(aTHX_ a,b)
#define amagic_cmp_locale(a,b)	S_amagic_cmp_locale(aTHX_ a,b)
#define amagic_i_ncmp(a,b)	S_amagic_i_ncmp(aTHX_ a,b)
#define amagic_ncmp(a,b)	S_amagic_ncmp(aTHX_ a,b)
#define qsortsvu(a,b,c)		S_qsortsvu(aTHX_ a,b,c)
#define sortcv(a,b)		S_sortcv(aTHX_ a,b)
#define sortcv_stacked(a,b)	S_sortcv_stacked(aTHX_ a,b)
#define sortcv_xsub(a,b)	S_sortcv_xsub(aTHX_ a,b)
#define sv_i_ncmp(a,b)		S_sv_i_ncmp(aTHX_ a,b)
#define sv_ncmp(a,b)		S_sv_ncmp(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_PP_SYS_C)
#define doform(a,b,c)		S_doform(aTHX_ a,b,c)
#define space_join_names_mortal(a)	S_space_join_names_mortal(aTHX_ a)
#  endif
#  if defined(PERL_IN_SCOPE_C)
#define save_pushptri32ptr(a,b,c,d)	S_save_pushptri32ptr(aTHX_ a,b,c,d)
#define save_scalar_at(a,b)	S_save_scalar_at(aTHX_ a,b)
#  endif
#  if defined(PERL_IN_SV_C)
#define F0convert		S_F0convert
#define anonymise_cv_maybe(a,b)	S_anonymise_cv_maybe(aTHX_ a,b)
#define assert_uft8_cache_coherent(a,b,c,d)	S_assert_uft8_cache_coherent(aTHX_ a,b,c,d)
#define curse(a,b)		S_curse(aTHX_ a,b)
#define expect_number(a)	S_expect_number(aTHX_ a)
#define find_array_subscript(a,b)	S_find_array_subscript(aTHX_ a,b)
#define find_hash_subscript(a,b)	S_find_hash_subscript(aTHX_ a,b)
#define find_uninit_var(a,b,c)	S_find_uninit_var(aTHX_ a,b,c)
#define glob_2number(a)		S_glob_2number(aTHX_ a)
#define glob_assign_glob(a,b,c)	S_glob_assign_glob(aTHX_ a,b,c)
#define glob_assign_ref(a,b)	S_glob_assign_ref(aTHX_ a,b)
#define more_sv()		S_more_sv(aTHX)
#define not_a_number(a)		S_not_a_number(aTHX_ a)
#define ptr_table_find		S_ptr_table_find
#define sv_2iuv_common(a)	S_sv_2iuv_common(aTHX_ a)
#define sv_add_arena(a,b,c)	S_sv_add_arena(aTHX_ a,b,c)
#define sv_pos_b2u_midway(a,b,c,d)	S_sv_pos_b2u_midway(aTHX_ a,b,c,d)
#define sv_pos_u2b_cached(a,b,c,d,e,f,g)	S_sv_pos_u2b_cached(aTHX_ a,b,c,d,e,f,g)
#define sv_pos_u2b_forwards	S_sv_pos_u2b_forwards
#define sv_pos_u2b_midway	S_sv_pos_u2b_midway
#define sv_unglob(a,b)		S_sv_unglob(aTHX_ a,b)
#define uiv_2buf		S_uiv_2buf
#define utf8_mg_len_cache_update(a,b,c)	S_utf8_mg_len_cache_update(aTHX_ a,b,c)
#define utf8_mg_pos_cache_update(a,b,c,d,e)	S_utf8_mg_pos_cache_update(aTHX_ a,b,c,d,e)
#define visit(a,b,c)		S_visit(aTHX_ a,b,c)
#    if defined(PERL_OLD_COPY_ON_WRITE)
#define sv_release_COW(a,b,c)	S_sv_release_COW(aTHX_ a,b,c)
#    endif
#    if defined(USE_ITHREADS)
#define sv_dup_common(a,b)	S_sv_dup_common(aTHX_ a,b)
#define sv_dup_inc_multiple(a,b,c,d)	S_sv_dup_inc_multiple(aTHX_ a,b,c,d)
#define unreferenced_to_tmp_stack(a)	S_unreferenced_to_tmp_stack(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_IN_SV_C) || defined (PERL_IN_OP_C)
#define varname(a,b,c,d,e,f)	Perl_varname(aTHX_ a,b,c,d,e,f)
#  endif
#  if defined(PERL_IN_TOKE_C)
#define ao(a)			S_ao(aTHX_ a)
#define check_uni()		S_check_uni(aTHX)
#define checkcomma(a,b,c)	S_checkcomma(aTHX_ a,b,c)
#define deprecate_commaless_var_list()	S_deprecate_commaless_var_list(aTHX)
#define filter_gets(a,b)	S_filter_gets(aTHX_ a,b)
#define find_in_my_stash(a,b)	S_find_in_my_stash(aTHX_ a,b)
#define force_ident(a,b)	S_force_ident(aTHX_ a,b)
#define force_next(a)		S_force_next(aTHX_ a)
#define force_strict_version(a)	S_force_strict_version(aTHX_ a)
#define force_version(a,b)	S_force_version(aTHX_ a,b)
#define force_word(a,b,c,d,e)	S_force_word(aTHX_ a,b,c,d,e)
#define incline(a)		S_incline(aTHX_ a)
#define intuit_method(a,b,c)	S_intuit_method(aTHX_ a,b,c)
#define intuit_more(a)		S_intuit_more(aTHX_ a)
#define lop(a,b,c)		S_lop(aTHX_ a,b,c)
#define missingterm(a)		S_missingterm(aTHX_ a)
#define no_op(a,b)		S_no_op(aTHX_ a,b)
#define readpipe_override()	S_readpipe_override(aTHX)
#define scan_const(a)		S_scan_const(aTHX_ a)
#define scan_formline(a)	S_scan_formline(aTHX_ a)
#define scan_heredoc(a)		S_scan_heredoc(aTHX_ a)
#define scan_ident(a,b,c,d,e)	S_scan_ident(aTHX_ a,b,c,d,e)
#define scan_inputsymbol(a)	S_scan_inputsymbol(aTHX_ a)
#define scan_pat(a,b)		S_scan_pat(aTHX_ a,b)
#define scan_str(a,b,c)		S_scan_str(aTHX_ a,b,c)
#define scan_subst(a)		S_scan_subst(aTHX_ a)
#define scan_trans(a)		S_scan_trans(aTHX_ a)
#define scan_word(a,b,c,d,e)	S_scan_word(aTHX_ a,b,c,d,e)
#define skipspace(a)		S_skipspace(aTHX_ a)
#define sublex_done()		S_sublex_done(aTHX)
#define sublex_push()		S_sublex_push(aTHX)
#define sublex_start()		S_sublex_start(aTHX)
#define swallow_bom(a)		S_swallow_bom(aTHX_ a)
#define tokenize_use(a,b)	S_tokenize_use(aTHX_ a,b)
#define tokeq(a)		S_tokeq(aTHX_ a)
#define update_debugger_info(a,b,c)	S_update_debugger_info(aTHX_ a,b,c)
#define yywarn(a,b)		S_yywarn(aTHX_ a,b)
#    if defined(PERL_MAD)
#define curmad(a,b)		S_curmad(aTHX_ a,b)
#define skipspace0(a)		S_skipspace0(aTHX_ a)
#define skipspace1(a)		S_skipspace1(aTHX_ a)
#define skipspace2(a,b)		S_skipspace2(aTHX_ a,b)
#define start_force(a)		S_start_force(aTHX_ a)
#    endif
#  endif
#  if defined(PERL_IN_UNIVERSAL_C)
#define isa_lookup(a,b,c,d)	S_isa_lookup(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_UTF8_C)
#define check_locale_boundary_crossing(a,b,c,d)	S_check_locale_boundary_crossing(aTHX_ a,b,c,d)
#define is_utf8_char_slow	S_is_utf8_char_slow
#define is_utf8_common(a,b,c)	S_is_utf8_common(aTHX_ a,b,c)
#define swatch_get(a,b,c)	S_swatch_get(aTHX_ a,b,c)
#define to_lower_latin1(a,b,c)	S_to_lower_latin1(aTHX_ a,b,c)
#  endif
#  if defined(PERL_IN_UTF8_C) || defined(PERL_IN_PP_C)
#define _to_upper_title_latin1(a,b,c,d)	Perl__to_upper_title_latin1(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_IN_UTIL_C)
#define ckwarn_common(a)	S_ckwarn_common(aTHX_ a)
#define closest_cop(a,b)	S_closest_cop(aTHX_ a,b)
#define invoke_exception_hook(a,b)	S_invoke_exception_hook(aTHX_ a,b)
#define mess_alloc()		S_mess_alloc(aTHX)
#define with_queued_errors(a)	S_with_queued_errors(aTHX_ a)
#define write_no_mem()		S_write_no_mem(aTHX)
#    if defined(PERL_MEM_LOG) && !defined(PERL_MEM_LOG_NOIMPL)
#define mem_log_common		S_mem_log_common
#    endif
#  endif
#  if defined(PERL_MAD)
#define addmad(a,b,c)		Perl_addmad(aTHX_ a,b,c)
#define append_madprops(a,b,c)	Perl_append_madprops(aTHX_ a,b,c)
#define do_op_xmldump(a,b,c)	Perl_do_op_xmldump(aTHX_ a,b,c)
#define do_pmop_xmldump(a,b,c)	Perl_do_pmop_xmldump(aTHX_ a,b,c)
#define mad_free(a)		Perl_mad_free(aTHX_ a)
#define madlex()		Perl_madlex(aTHX)
#define madparse(a)		Perl_madparse(aTHX_ a)
#define newMADPROP(a,b,c,d)	Perl_newMADPROP(aTHX_ a,b,c,d)
#define newMADsv(a,b)		Perl_newMADsv(aTHX_ a,b)
#define newTOKEN(a,b,c)		Perl_newTOKEN(aTHX_ a,b,c)
#define op_getmad(a,b,c)	Perl_op_getmad(aTHX_ a,b,c)
#define op_getmad_weak(a,b,c)	Perl_op_getmad_weak(aTHX_ a,b,c)
#define op_xmldump(a)		Perl_op_xmldump(aTHX_ a)
#define package(a)		Perl_package(aTHX_ a)
#define pad_peg			Perl_pad_peg
#define pmop_xmldump(a)		Perl_pmop_xmldump(aTHX_ a)
#define prepend_madprops(a,b,c)	Perl_prepend_madprops(aTHX_ a,b,c)
#define sv_catxmlpv(a,b,c)	Perl_sv_catxmlpv(aTHX_ a,b,c)
#define sv_catxmlpvn(a,b,c,d)	Perl_sv_catxmlpvn(aTHX_ a,b,c,d)
#define sv_catxmlsv(a,b)	Perl_sv_catxmlsv(aTHX_ a,b)
#define sv_xmlpeek(a)		Perl_sv_xmlpeek(aTHX_ a)
#define token_free(a)		Perl_token_free(aTHX_ a)
#define token_getmad(a,b,c)	Perl_token_getmad(aTHX_ a,b,c)
#define utilize(a,b,c,d,e)	Perl_utilize(aTHX_ a,b,c,d,e)
#define xmldump_all()		Perl_xmldump_all(aTHX)
#define xmldump_all_perl(a)	Perl_xmldump_all_perl(aTHX_ a)
#define xmldump_eval()		Perl_xmldump_eval(aTHX)
#define xmldump_form(a)		Perl_xmldump_form(aTHX_ a)
#ifndef PERL_IMPLICIT_CONTEXT
#define xmldump_indent		Perl_xmldump_indent
#endif
#define xmldump_packsubs(a)	Perl_xmldump_packsubs(aTHX_ a)
#define xmldump_packsubs_perl(a,b)	Perl_xmldump_packsubs_perl(aTHX_ a,b)
#define xmldump_sub(a)		Perl_xmldump_sub(aTHX_ a)
#define xmldump_sub_perl(a,b)	Perl_xmldump_sub_perl(aTHX_ a,b)
#define xmldump_vindent(a,b,c,d)	Perl_xmldump_vindent(aTHX_ a,b,c,d)
#  endif
#  if defined(PERL_NEED_MY_BETOH16)
#define my_betoh16		Perl_my_betoh16
#  endif
#  if defined(PERL_NEED_MY_BETOH32)
#define my_betoh32		Perl_my_betoh32
#  endif
#  if defined(PERL_NEED_MY_BETOH64)
#define my_betoh64		Perl_my_betoh64
#  endif
#  if defined(PERL_NEED_MY_BETOHI)
#define my_betohi		Perl_my_betohi
#  endif
#  if defined(PERL_NEED_MY_BETOHL)
#define my_betohl		Perl_my_betohl
#  endif
#  if defined(PERL_NEED_MY_BETOHS)
#define my_betohs		Perl_my_betohs
#  endif
#  if defined(PERL_NEED_MY_HTOBE16)
#define my_htobe16		Perl_my_htobe16
#  endif
#  if defined(PERL_NEED_MY_HTOBE32)
#define my_htobe32		Perl_my_htobe32
#  endif
#  if defined(PERL_NEED_MY_HTOBE64)
#define my_htobe64		Perl_my_htobe64
#  endif
#  if defined(PERL_NEED_MY_HTOBEI)
#define my_htobei		Perl_my_htobei
#  endif
#  if defined(PERL_NEED_MY_HTOBEL)
#define my_htobel		Perl_my_htobel
#  endif
#  if defined(PERL_NEED_MY_HTOBES)
#define my_htobes		Perl_my_htobes
#  endif
#  if defined(PERL_NEED_MY_HTOLE16)
#define my_htole16		Perl_my_htole16
#  endif
#  if defined(PERL_NEED_MY_HTOLE32)
#define my_htole32		Perl_my_htole32
#  endif
#  if defined(PERL_NEED_MY_HTOLE64)
#define my_htole64		Perl_my_htole64
#  endif
#  if defined(PERL_NEED_MY_HTOLEI)
#define my_htolei		Perl_my_htolei
#  endif
#  if defined(PERL_NEED_MY_HTOLEL)
#define my_htolel		Perl_my_htolel
#  endif
#  if defined(PERL_NEED_MY_HTOLES)
#define my_htoles		Perl_my_htoles
#  endif
#  if defined(PERL_NEED_MY_LETOH16)
#define my_letoh16		Perl_my_letoh16
#  endif
#  if defined(PERL_NEED_MY_LETOH32)
#define my_letoh32		Perl_my_letoh32
#  endif
#  if defined(PERL_NEED_MY_LETOH64)
#define my_letoh64		Perl_my_letoh64
#  endif
#  if defined(PERL_NEED_MY_LETOHI)
#define my_letohi		Perl_my_letohi
#  endif
#  if defined(PERL_NEED_MY_LETOHL)
#define my_letohl		Perl_my_letohl
#  endif
#  if defined(PERL_NEED_MY_LETOHS)
#define my_letohs		Perl_my_letohs
#  endif
#  if defined(PERL_USES_PL_PIDSTATUS) && defined(PERL_IN_UTIL_C)
#define pidgone(a,b)		S_pidgone(aTHX_ a,b)
#  endif
#  if defined(USE_ITHREADS)
#define mro_meta_dup(a,b)	Perl_mro_meta_dup(aTHX_ a,b)
#define padlist_dup(a,b)	Perl_padlist_dup(aTHX_ a,b)
#  endif
#  if defined(USE_LOCALE_COLLATE)
#define magic_setcollxfrm(a,b)	Perl_magic_setcollxfrm(aTHX_ a,b)
#define mem_collxfrm(a,b,c)	Perl_mem_collxfrm(aTHX_ a,b,c)
#  endif
#endif

#endif	/* #ifndef PERL_NO_SHORT_NAMES */

/* Compatibility stubs.  Compile extensions with -DPERL_NOCOMPAT to
   disable them.
 */

#if !defined(PERL_CORE)
#  define sv_setptrobj(rv,ptr,name)	sv_setref_iv(rv,name,PTR2IV(ptr))
#  define sv_setptrref(rv,ptr)		sv_setref_iv(rv,NULL,PTR2IV(ptr))
#endif

#if !defined(PERL_CORE) && !defined(PERL_NOCOMPAT)

/* Compatibility for various misnamed functions.  All functions
   in the API that begin with "perl_" (not "Perl_") take an explicit
   interpreter context pointer.
   The following are not like that, but since they had a "perl_"
   prefix in previous versions, we provide compatibility macros.
 */
#  define perl_atexit(a,b)		call_atexit(a,b)
#  define perl_call_argv(a,b,c)		call_argv(a,b,c)
#  define perl_call_method(a,b)		call_method(a,b)
#  define perl_call_pv(a,b)		call_pv(a,b)
#  define perl_call_sv(a,b)		call_sv(a,b)
#  define perl_eval_pv(a,b)		eval_pv(a,b)
#  define perl_eval_sv(a,b)		eval_sv(a,b)
#  define perl_get_av(a,b)		get_av(a,b)
#  define perl_get_cv(a,b)		get_cv(a,b)
#  define perl_get_hv(a,b)		get_hv(a,b)
#  define perl_get_sv(a,b)		get_sv(a,b)
#  define perl_init_i18nl10n(a)		init_i18nl10n(a)
#  define perl_init_i18nl14n(a)		init_i18nl14n(a)
#  define perl_new_collate(a)		new_collate(a)
#  define perl_new_ctype(a)		new_ctype(a)
#  define perl_new_numeric(a)		new_numeric(a)
#  define perl_require_pv(a)		require_pv(a)

/* varargs functions can't be handled with CPP macros. :-(
   This provides a set of compatibility functions that don't take
   an extra argument but grab the context pointer using the macro
   dTHX.
 */
#if defined(PERL_IMPLICIT_CONTEXT) && !defined(PERL_NO_SHORT_NAMES)
#  define croak			Perl_croak_nocontext
#  define deb			Perl_deb_nocontext
#  define die			Perl_die_nocontext
#  define form			Perl_form_nocontext
#  define load_module		Perl_load_module_nocontext
#  define mess			Perl_mess_nocontext
#  define newSVpvf		Perl_newSVpvf_nocontext
#  define sv_catpvf		Perl_sv_catpvf_nocontext
#  define sv_catpvf_mg		Perl_sv_catpvf_mg_nocontext
#  define sv_setpvf		Perl_sv_setpvf_nocontext
#  define sv_setpvf_mg		Perl_sv_setpvf_mg_nocontext
#  define warn			Perl_w